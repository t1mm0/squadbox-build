version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=gdiba2_squadbox
      - POSTGRES_USER=gdiba-2tb-hostingcom
      - POSTGRES_PASSWORD=xuPxu7-buwxaq-kemryf
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gdiba-2tb-hostingcom -d gdiba2_squadbox"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://squadbox.gdiba2.ssh.tb-hosting.com/api
    volumes:
      - ./dist:/app/dist
    restart: unless-stopped
    depends_on:
      - backend

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://gdiba-2tb-hostingcom:xuPxu7-buwxaq-kemryf@postgres:5432/gdiba2_squadbox
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=gdiba2_squadbox
      - POSTGRES_USER=gdiba-2tb-hostingcom
      - POSTGRES_PASSWORD=xuPxu7-buwxaq-kemryf
      - MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/gdiba2_squadbox
      - JWT_SECRET=your-super-secret-jwt-key-here-64-chars-long
      - JWT_128_KEY=your-super-secret-jwt-128-key-here-128-chars-long-for-enhanced-security
      - API_URL=https://squadbox.gdiba2.ssh.tb-hosting.com
      - NODE_ENV=production
      - CORS_ORIGINS=https://squadbox.gdiba2.ssh.tb-hosting.com
    volumes:
      - ./backend:/app
      - ./generated_projects:/app/generated_projects
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    restart: unless-stopped

  # Ollama Service (optional)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    restart: unless-stopped
    profiles:
      - ai

volumes:
  postgres_data:
  ollama_models:
