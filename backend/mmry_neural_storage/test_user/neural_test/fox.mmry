{
  "user_id": "test_user",
  "project_id": "neural_test",
  "file_name": "fox.txt",
  "file_type": "text",
  "compression_system": "MMRY_Neural_Folding_v3",
  "neural_prediction": {
    "method": "zlib",
    "confidence": 0.014598214285714287
  },
  "folding_metadata": {
    "strategy": "repetitive_folding",
    "stages": [
      {
        "stage": 1,
        "method": "rle_alphabet",
        "input_size": 450,
        "output_size": 450,
        "stage_compression_ratio": 1.0,
        "metadata": {
          "method": "rle_alphabet",
          "runs": 0
        }
      },
      {
        "stage": 2,
        "method": "lz78",
        "input_size": 450,
        "output_size": 871,
        "stage_compression_ratio": 1.9355555555555555,
        "metadata": {
          "method": "lz78",
          "dictionary_size": 177,
          "original_size": 450,
          "compressed_size": 871
        }
      },
      {
        "stage": 3,
        "method": "huffman",
        "input_size": 871,
        "output_size": 32,
        "stage_compression_ratio": 0.03673938002296211,
        "metadata": {
          "method": "huffman",
          "original_size": 871,
          "estimated_compressed_size": 352,
          "entropy": 3.2335932142010315
        }
      }
    ],
    "total_compression_ratio": 0.07111111111111111,
    "stage_count": 3,
    "original_size": 450,
    "final_size": 32,
    "space_savings": 418,
    "space_savings_percent": 92.88888888888889
  },
  "original_size": 450,
  "compressed_size": 32,
  "compression_ratio": 0.07111111111111111,
  "space_savings_percent": 92.88888888888889,
  "content_hash": "67e8e9c79772f865",
  "timestamp": 1754563556,
  "mmry_signature": "MMRY_NEURAL_FOLDING_PROPRIETARY",
  "compressed_content": "HUFFMAN:352:[84][104][101][32][1",
  "content_encoding": "text",
  "mmry_index": {
    "version": "1.0",
    "created_at": 1754563556,
    "total_lines": 1,
    "total_chars": 450,
    "total_words": 90,
    "line_index": {
      "0": {
        "start_char": 0,
        "end_char": 450,
        "length": 450,
        "preview": "The quick brown fox jumps over the lazy dog. The q...",
        "hash": "1d07fa20"
      }
    },
    "word_index": {
      "the": {
        "count": 20,
        "positions": [
          0,
          31,
          45,
          76,
          90,
          121,
          135,
          166,
          180,
          211
        ]
      },
      "quick": {
        "count": 10,
        "positions": [
          4,
          49,
          94,
          139,
          184,
          229,
          274,
          319,
          364,
          409
        ]
      },
      "over": {
        "count": 10,
        "positions": [
          26,
          71,
          116,
          161,
          206,
          251,
          296,
          341,
          386,
          431
        ]
      },
      "brown": {
        "count": 10,
        "positions": [
          10,
          55,
          100,
          145,
          190,
          235,
          280,
          325,
          370,
          415
        ]
      },
      "fox": {
        "count": 10,
        "positions": [
          16,
          61,
          106,
          151,
          196,
          241,
          286,
          331,
          376,
          421
        ]
      },
      "lazy": {
        "count": 10,
        "positions": [
          35,
          80,
          125,
          170,
          215,
          260,
          305,
          350,
          395,
          440
        ]
      },
      "jumps": {
        "count": 10,
        "positions": [
          20,
          65,
          110,
          155,
          200,
          245,
          290,
          335,
          380,
          425
        ]
      },
      "dog.": {
        "count": 10,
        "positions": [
          40,
          85,
          130,
          175,
          220,
          265,
          310,
          355,
          400,
          445
        ]
      }
    },
    "structural_index": {},
    "segment_index": {},
    "search_capabilities": [
      "line_range_retrieval",
      "word_search",
      "structural_search",
      "segment_retrieval",
      "partial_decompression"
    ]
  }
}